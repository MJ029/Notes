******************************************************************Python Dictionaries***********************************************
- In Pyhton Dictionary each key is separated from its value by a colon (:), the items are separated by commas, and the whole thing is enclosed in curly braces.
- An empty dictionary without any items is written with just two curly braces, like this: {}.
- Keys are unique within a dictionary while values may not be.
- The values of a dictionary can be of any type, but the keys must be of an immutable data type such as strings, numbers, or tuples.
- Accessing Values in Dictionary:
	- To access dictionary elements, you can use the familiar square brackets along with the key to obtain its value.
	- Ex:
		dict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'}
		print "dict['Name']: ", dict['Name']
		print "dict['Age']: ", dict['Age']
- If we attempt to access a data item with a key, which is not part of the dictionary, we get an error
	Ex:
		dict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'}
		print "dict['Alice']: ", dict['Alice']

- Updating Dictionary:
	You can update a dictionary by adding a new entry or a key-value pair, modifying an existing entry, or deleting an existing entry as shown below
	Ex:
		dict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'}
		dict['Age'] = 8; # update existing entry
		dict['School'] = "DPS School"; # Add new entry

		print "dict['Age']: ", dict['Age']
		print "dict['School']: ", dict['School']
		
- Delete Dictionary Elements:
	- You can either remove individual dictionary elements or clear the entire contents of a dictionary.
	- You can also delete entire dictionary in a single operation.
	- You can also delete entire dictionary in a single operation.
	Ex:
		dict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'}
		del dict['Name']; # remove entry with key 'Name'
		dict.clear();     # remove all entries in dict
		del dict ;        # delete entire dictionary

		print "dict['Age']: ", dict['Age']
		print "dict['School']: ", dict['School']

- Properties of Dictionary Keys:
	- More than one entry per key not allowed. 
	- Which means no duplicate key is allowed. When duplicate keys encountered during assignment, the last assignment wins.
	- Keys must be immutable.
	- Which means you can use strings, numbers or tuples as dictionary keys but something like ['key'] is not allowed.

- Common Dictionary functions same as List and Tuples
	- cmp(dict1, dict2)
	- len(dict1)
	- str(dict1): 
		The method str() produces a printable string representation of a dictionary.
		Ex:
			dict = {'Name': 'Zara', 'Age': 7};
			print "Equivalent String : %s" % str (dict)
	- type(dict):
		The method type() returns the type of the passed variable.
		If passed variable is dictionary then it would return a dictionary type.
		Ex:
			dict = {'Name': 'Zara', 'Age': 7};
			print "Variable Type : %s" %  type (dict)
	- clear():
		The method clear() removes all items from the dictionary.
		Ex:
			dict = {'Name': 'Zara', 'Age': 7};
			print "Start Len : %d" %  len(dict)
			dict.clear()
			print "End Len : %d" %  len(dict)
	- copy():
		The method copy() returns a shallow copy of the dictionary.
		Ex:
			dict1 = {'Name': 'Zara', 'Age': 7};
			dict2 = dict1.copy()
			print "New Dictionary : %s" %  str(dict2)
	- fromkeys():
		The method fromkeys() creates a new dictionary with keys from seq and values set to value.
		Ex:
			seq = ('name', 'age', 'sex')
			dict = dict.fromkeys(seq)
			print "New Dictionary : %s" %  str(dict)

			dict = dict.fromkeys(seq, 10)
			print "New Dictionary : %s" %  str(dict)
	- get()
		The method get() returns a value for the given key. 
		If key is not available then returns default value None.
		Ex:
			dict = {'Name': 'Zabra', 'Age': 7}
			print "Value : %s" %  dict.get('Age')
			print "Value : %s" %  dict.get('Education', "Never")
	- has_key():
		The method has_key() returns true if a given key is available in the dictionary, otherwise it returns a false.
		Ex:
			dict = {'Name': 'Zara', 'Age': 7}
			print "Value : %s" %  dict.has_key('Age')
			print "Value : %s" %  dict.has_key('Sex')
	- items():
		The method items() returns a list of dict's (key, value) tuple pairs
		Ex:
			dict = {'Name': 'Zara', 'Age': 7}
			print "Value : %s" %  dict.items()
	- Keys():
		The method keys() returns a list of all the available keys in the dictionary.
		Ex:
			dict = {'Name': 'Zara', 'Age': 7}
			print "Value : %s" %  dict.keys()
	- setdefault():
		The method setdefault() is similar to get(), but will set dict[key]=default if key is not already in dict.
		Ex:
			dict = {'Name': 'Zara', 'Age': 7}
			print "Value : %s" %  dict.setdefault('Age', None)
			print "Value : %s" %  dict.setdefault('Sex', None)
	- update():
		The method update() adds dictionary dict2's key-values pairs in to dict. 
		This function does not return anything.
		Ex;
			dict = {'Name': 'Zara', 'Age': 7}
			dict2 = {'Sex': 'female' }

			dict.update(dict2)
			print "Value : %s" %  dict
	- values():
		The method values() returns a list of all the values available in a given dictionary.
		Ex:
			dict = {'Name': 'Zara', 'Age': 7}
			print "Value : %s" %  dict.values()
